name: build and publish

on:
  #schedule:
  #  - cron: "0 * * * *"
  workflow_dispatch:
  push:
    paths-ignore:
      - '**.md'

jobs:

  # build-native:  
  #   name: 'Build on ${{ matrix.os }}'
  #   strategy:
  #     fail-fast: true
  #     matrix:
  #       # https://github.com/actions/runner-images
  #       os: [ macos-14, macos-13, ubuntu-24.04, windows-2022 ]
  #       #os: [ macos-14 ]
  #       #os: [ ubuntu-24.04 ]
  #       include:
  #         - os: 'macos-14'
  #           plat-name: 'darwin-arm64'
  #         - os: 'macos-13'
  #           plat-name: 'darwin-x64'
  #         - os: 'ubuntu-24.04'
  #           plat-name: 'linux-x64'
  #         - os: 'windows-2022'
  #           plat-name: 'win32-x64'

  #   runs-on: ${{ matrix.os }}

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: 'Add Developer Command Prompt for Microsoft Visual C++'
  #       if: ${{ runner.os == 'Windows' }}
  #       uses: ilammy/msvc-dev-cmd@v1

  #     - uses: graalvm/setup-graalvm@v1
  #       with:
  #         java-version: '21'
  #         distribution: 'graalvm'
  #         cache: 'gradle'
  #         github-token: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Build native image
  #       shell: bash
  #       run: |
  #         ./gradlew clean nativeCompile
  #         ls -la build/native/nativeCompile/

  #     - uses: actions/upload-artifact@v4
  #       if: ${{ failure() }}
  #       with:
  #         name: reports-native-${{ matrix.plat-name }}
  #         path: build/reports/tests/

  #     - name: Upload native library
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: native-image-${{ matrix.plat-name }}
  #         path: build/native/nativeCompile/

  build-jvm:
    env:
      BUILD_NUMBER: ${{ github.run_number }}

    runs-on: ubuntu-24.04

    permissions:
      contents: write
      packages: write

    steps:
      - uses: actions/checkout@v4

      - uses: graalvm/setup-graalvm@v1
        with:
          java-version: '24'
          distribution: 'graalvm'
          cache: 'gradle'
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run unit tests
        run: |
          ./gradlew clean test -i

      - name: Build jar
        run: |
          ./gradlew build -i 
          ls -la build/libs

      - name: Locate fat JAR
        id: fatjar
        shell: bash
        run: |
          set -euo pipefail
          # First try common names (Shadow plugin, etc.)
          CANDIDATE=$(ls -1 build/libs/*-all.jar 2>/dev/null || true)
          echo "Found fat JAR: ${CANDIDATE}"
          echo "jar=${CANDIDATE}" >> "$GITHUB_OUTPUT"

      - name: Upload fat JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-fatjar
          path: ${{ steps.fatjar.outputs.jar }}
          if-no-files-found: error

  runtimes:
    env:
      BUILD_NUMBER: ${{ github.run_number }}
    name: Build jlink runtime (${{ matrix.os }})
    needs: build-jvm
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-24.04, ubuntu-24.04-arm, macos-13, macos-14, windows-2022 ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '24'
          cache: 'gradle'

      - name: Download fat JAR
        uses: actions/download-artifact@v4
        with:
          name: app-fatjar
          path: ./dist

      - name: Show downloaded files
        shell: bash
        run: ls -la ./dist

      # *nix jlink (Linux + macOS)
      - name: Build runtime (Unix)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euo pipefail
          JAR=$(ls -1 dist/*.jar | head -n1)
          RUNTIME_DIR="runtime-${{ matrix.os }}"
          # Derive required modules from the JAR
          MODS=$(jdeps --print-module-deps --ignore-missing-deps --multi-release 24 "$JAR")
          echo "Modules: $MODS"
          jlink \
            --add-modules "$MODS" \
            --no-header-files --no-man-pages \
            --strip-debug --compress=2 \
            --output "$RUNTIME_DIR"
          echo "Created $RUNTIME_DIR"
          # (Optional) test the runtime can launch the app
          "./$RUNTIME_DIR/bin/java" -version

      # Windows jlink (PowerShell)
      - name: Build runtime (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $jar = Get-ChildItem -Path dist -Filter *.jar | Select-Object -First 1
          if (-not $jar) { throw "No JAR found in dist" }
          $runtimeDir = "runtime-${{ matrix.os }}"
          $mods = & jdeps --print-module-deps --ignore-missing-deps --multi-release 24 $jar.FullName
          Write-Host "Modules: $mods"
          & jlink `
            --add-modules $mods `
            --no-header-files --no-man-pages `
            --strip-debug --compress=2 `
            --output $runtimeDir
          Write-Host "Created $runtimeDir"
          & ".\$runtimeDir\bin\java.exe" -version

      - name: Upload runtime artifact
        uses: actions/upload-artifact@v4
        with:
          name: jre-runtime-${{ matrix.os }}
          path: runtime-${{ matrix.os }}
          if-no-files-found: error
